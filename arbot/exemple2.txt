#include <Arduino.h>

#define STEP1 37
#define DIR1  38
#define STEP2 39
#define DIR2  40
#define STEP3 41
#define DIR3  42
#define ENABLE_PIN 36

const float stepAngle = 0.45;
const int delay_min = 500;
const int delay_max = 1200;
const int ramp_steps = 45;

int angleToSteps(float angle) {
  return round(angle / stepAngle);
}

class StepperMotor {
public:
  int stepPin, dirPin;
  int position = 0;
  int target = 0;
  bool dir = true;

  StepperMotor(int step, int dir) {
    stepPin = step;
    dirPin = dir;
  }

  void begin() {
    pinMode(stepPin, OUTPUT);
    pinMode(dirPin, OUTPUT);
  }

  void prepareMoveTo(int newTarget) {
    target = newTarget;
    dir = (target > position);
    digitalWrite(dirPin, dir ? HIGH : LOW);
  }

  bool tick() {
    if (position == target) return false;
    digitalWrite(stepPin, HIGH);
    delayMicroseconds(2);
    digitalWrite(stepPin, LOW);
    delayMicroseconds(2);
    position += dir ? 1 : -1;
    return true;
  }

  bool isMoving() {
    return position != target;
  }
};

StepperMotor motor1(STEP1, DIR1);
StepperMotor motor2(STEP2, DIR2);
StepperMotor motor3(STEP3, DIR3);

int getRampDelay(int stepIndex, int totalSteps) {
  if (stepIndex < ramp_steps)
    return delay_max - (delay_max - delay_min) * stepIndex / ramp_steps;
  else if (stepIndex > totalSteps - ramp_steps)
    return delay_max - (delay_max - delay_min) * (totalSteps - stepIndex) / ramp_steps;
  return delay_min;
}

void syncMoveAllTo(int target) {
  motor1.prepareMoveTo(target);
  motor2.prepareMoveTo(target);
  motor3.prepareMoveTo(target);

  int totalSteps = max(abs(motor1.target - motor1.position),
                       max(abs(motor2.target - motor2.position),
                           abs(motor3.target - motor3.position)));

  for (int step = 0; step < totalSteps; step++) {
    // Set direction pins correctly already in prepareMoveTo()

    // Phase 1: Send rising edge (HIGH) to active motors
    if (motor1.isMoving()) digitalWrite(motor1.stepPin, HIGH);
    if (motor2.isMoving()) digitalWrite(motor2.stepPin, HIGH);
    if (motor3.isMoving()) digitalWrite(motor3.stepPin, HIGH);

    delayMicroseconds(3);  // pulse width

    // Phase 2: Set LOW and update position
    if (motor1.isMoving()) {
      digitalWrite(motor1.stepPin, LOW);
      motor1.position += motor1.dir ? 1 : -1;
    }
    if (motor2.isMoving()) {
      digitalWrite(motor2.stepPin, LOW);
      motor2.position += motor2.dir ? 1 : -1;
    }
    if (motor3.isMoving()) {
      digitalWrite(motor3.stepPin, LOW);
      motor3.position += motor3.dir ? 1 : -1;
    }

    delayMicroseconds(getRampDelay(step, totalSteps));
  }
}


void rebound() {
  int steps0 = angleToSteps(0);
  int steps90 = angleToSteps(90);
  digitalWrite(ENABLE_PIN, LOW);
  syncMoveAllTo(steps90);
  delay(100);
  syncMoveAllTo(steps0);
  delay(100);
  digitalWrite(ENABLE_PIN, HIGH);
}

void setup() {
  Serial.begin(115200);
  motor1.begin();
  motor2.begin();
  motor3.begin();
  pinMode(ENABLE_PIN, OUTPUT);
  digitalWrite(ENABLE_PIN, HIGH);
}

void loop() {
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    if (command == "BOUNCE") {
      Serial.println("🛰️ Rebond reçu via UART !");
      rebound();
    }
  }
}
